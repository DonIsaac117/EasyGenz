{
  "controllers": {
    "CalendarController.php": "<?php\r\n\r\nrequire_once './../models/Events.php';\r\n\r\nheader('Content-Type: application/json');\r\n\r\nclass CalendarController\r\n{\r\n\r\n    private $event;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->event = new Event();\r\n    }\r\n\r\n    public function loadEvents($id_usuario)\r\n    {\r\n        $stmt = $this->event->getByUserId($id_usuario);\r\n    \r\n        if (!$stmt) {\r\n            echo json_encode(['error' => 'Error al obtener eventos']);\r\n            return;\r\n        }\r\n    \r\n        $eventsByDate = [];\r\n    \r\n        while ($row = $stmt->fetch_assoc()) {\r\n            $fecha = $row['fecha'];\r\n            $hora_entrada = date(\"H:i\", strtotime($row['hora_entrada']));\r\n            $hora_salida = date(\"H:i\", strtotime($row['hora_salida']));\r\n            $observacion = $row['observacion'];\r\n    \r\n            if (!isset($eventsByDate[$fecha])) {\r\n                $eventsByDate[$fecha] = ['entrada' => [], 'salida' => []];\r\n            }\r\n    \r\n            if ($hora_entrada) {\r\n                $eventsByDate[$fecha]['entrada'][] = [\r\n                    'title' => 'Entrada',\r\n                    'start' => $fecha . 'T' . $hora_entrada,\r\n                    'allDay' => false,\r\n                    'className' => 'entrada',\r\n                    'observations' => $observacion\r\n                ];\r\n            }\r\n    \r\n            if ($hora_salida) {\r\n                $eventsByDate[$fecha]['salida'][] = [\r\n                    'title' => 'Salida',\r\n                    'start' => $fecha . 'T' . $hora_salida,\r\n                    'allDay' => false,\r\n                    'className' => 'salida',\r\n                    'observations' => $observacion\r\n                ];\r\n            }\r\n        }\r\n    \r\n        $calendarEvents = [];\r\n        foreach ($eventsByDate as $date => $events) {\r\n            if (!empty($events['entrada'])) {\r\n                usort($events['entrada'], function($a, $b) {\r\n                    return strcmp($a['start'], $b['start']);\r\n                });\r\n                $calendarEvents[] = $events['entrada'][0]; // Primera entrada\r\n            }\r\n            if (!empty($events['salida'])) {\r\n                usort($events['salida'], function($a, $b) {\r\n                    return strcmp($b['start'], $b['start']);\r\n                });\r\n                $calendarEvents[] = $events['salida'][count($events['salida']) - 1]; // Última salida\r\n            }\r\n        }\r\n    \r\n        echo json_encode([\r\n            'calendarEvents' => $calendarEvents,\r\n            'allEvents' => array_merge(...array_values($eventsByDate))\r\n        ]);\r\n        exit();\r\n    }\r\n    \r\n    \r\n\r\n\r\n    public function registerEvent($data)\r\n    {\r\n        $this->event->id_usuario = $data['id_usuario'];\r\n        $this->event->fecha = $data['fecha'];\r\n        $this->event->hora_entrada = $data['hora_entrada'];\r\n        $this->event->hora_salida = $data['hora_salida'];\r\n\r\n        if ($this->event->create()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"
  },
  "js": {
    "funcionario": {
      "inicio.js": "//Calendario\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  var calendarEl = document.getElementById('calendar');\r\n  var calendar = new FullCalendar.Calendar(calendarEl, {\r\n      initialView: 'dayGridMonth',\r\n      initialDate: new Date(),\r\n      headerToolbar: {\r\n          left: 'title',\r\n          right: 'today prev,next'\r\n      },\r\n      eventSources: [\r\n          {\r\n              url: './events/load_events.php',\r\n              method: 'POST',\r\n              failure: function() {\r\n                  alert('Error al cargar eventos');\r\n              },\r\n              success: function(response) {\r\n                try {\r\n                    console.log('Datos recibidos:', response);\r\n\r\n                    if (response.error) {\r\n                        console.error('Error:', response.error);\r\n                        return;\r\n                    }\r\n\r\n                    if (!response.calendarEvents || !response.allEvents) {\r\n                        console.error('La respuesta no contiene los datos esperados.');\r\n                        return;\r\n                    }\r\n\r\n                    // Elimina todos los eventos actuales\r\n                    calendar.getEvents().forEach(event => event.remove());\r\n                    \r\n                    // Añadir eventos al calendario\r\n                    calendar.addEventSource(response.calendarEvents);\r\n                    \r\n                    // Actualiza el div de descripción\r\n                    updateDescription(new Date().toISOString().split('T')[0]);\r\n                } catch (e) {\r\n                    console.error('Error procesando la respuesta:', e);\r\n                }\r\n            }\r\n          }\r\n      ],\r\n      eventTimeFormat: {\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          hour12: true,\r\n          meridiem: 'short'\r\n      },\r\n      selectable: true,\r\n      locale: 'es',\r\n      dateClick: function(info) {\r\n          var date = info.dateStr;\r\n          updateDescription(date);\r\n      },\r\n      eventDidMount: function(info) {\r\n          var eventDate = new Date(info.event.start);\r\n          var today = new Date();\r\n          if (eventDate.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0)) {\r\n              info.el.style.backgroundColor = 'lightgreen';\r\n          }\r\n          if (info.event.classNames.includes('entrada')) {\r\n              info.el.style.color = 'green';\r\n          }\r\n          if (info.event.classNames.includes('salida')) {\r\n              info.el.style.color = 'blue';\r\n          }\r\n      }\r\n  });\r\n\r\n  calendar.render();\r\n\r\n  function updateDescription(date) {\r\n      var titleDescriptionH2 = document.querySelector('.titleDescription h2');\r\n      var titleDescriptionH3 = document.querySelector('.titleDescription h3');\r\n      var textDescriptionEntradaH4 = document.querySelector('.textDescription:nth-child(1) h4');\r\n      var textDescriptionSalidaH4 = document.querySelector('.textDescription:nth-child(2) h4');\r\n      var observacionH5 = document.querySelector('.observacion h5');\r\n\r\n      titleDescriptionH2.textContent = new Date(date).toLocaleDateString('es-ES', { weekday: 'long' }).toUpperCase();\r\n      titleDescriptionH3.textContent = date;\r\n\r\n      // Filtra los eventos del día seleccionado\r\n      var selectedDateEvents = calendar.getEvents().filter(event => event.startStr.startsWith(date));\r\n      console.log('Eventos seleccionados:', selectedDateEvents);\r\n\r\n      var entradas = [];\r\n      var salidas = [];\r\n      var observaciones = [];\r\n\r\n      selectedDateEvents.forEach(event => {\r\n          var time = event.start.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit', hour12: true });\r\n          var type = event.classNames.includes('entrada') ? 'entrada' : 'salida';\r\n          var observation = event.extendedProps.observations || 'N/A';\r\n\r\n          if (type === 'entrada') {\r\n              entradas.push(time);\r\n          } else if (type === 'salida') {\r\n              salidas.push(time);\r\n          }\r\n          observaciones.push(observation);\r\n      });\r\n\r\n      textDescriptionEntradaH4.innerHTML = entradas.length > 0 ? entradas.map(time => `<p>${time}</p>`).join('') : 'N/A';\r\n      textDescriptionSalidaH4.innerHTML = salidas.length > 0 ? salidas.map(time => `<p>${time}</p>`).join('') : 'N/A';\r\n      observacionH5.innerHTML = observaciones.length > 0 ? observaciones.map(obs => `<p>${obs}</p>`).join('') : 'N/A';\r\n  }\r\n\r\n  // Configuración inicial para hoy\r\n  updateDescription(new Date().toISOString().split('T')[0]);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Perfil\r\n\r\nvar perfilSpan = document.querySelector('.perfil>span');\r\nvar perfilMenu = document.querySelector('.perfilMenu');\r\n\r\nperfilSpan.addEventListener('click', function(e) {\r\n    e.stopPropagation();\r\n    perfilMenu.classList.toggle('show');\r\n});\r\n\r\ndocument.addEventListener('click', function(e) {\r\n    if (!perfilMenu.contains(e.target) && !perfilSpan.contains(e.target)) {\r\n        perfilMenu.classList.remove('show');\r\n    }\r\n});\r\n\r\nperfilMenu.addEventListener('click', function(e) {\r\n    e.stopPropagation();\r\n});\r\n\r\n// Mostrar los elementos con animación después de cargar la página\r\nsetTimeout(function() {\r\n  document.querySelector('.main').classList.add('show');\r\n\r\n}, 100); \r\n\r\nsetTimeout(function() {\r\n  document.querySelector('.description').classList.add('show');\r\n}, 700); \r\n\r\n\r\n"
    }
  }
}